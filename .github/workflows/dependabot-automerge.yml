name: "Dependabot Auto Approve and Merge"
on:
  workflow_call:
    inputs:
      branches:
        required: false
        type: string
        default: "main"
    secrets:
      github-token:
        required: true

jobs:
  automerge:
    if: |
      github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]'
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - name: Checkout repo
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Approve PR
        uses: hmarr/auto-approve-action@f0939ea97e9205ef24d872e76833fa908a770363 # v4.0.0
        with:
          github-token: ${{ secrets.github-token }}

      - name: Wait for external checks (Jenkins/Snyk)
        run: sleep 30

      - name: Merge PR
        uses: actions/github-script@ed597411d8f924073f98dfc5c65a23a2325f34cd # v8.0.0
        with:
          github-token: ${{ secrets.github-token }}
          script: |
            const pr = context.payload.pull_request;
            const { owner, repo } = context.repo;
            const ref = pr.head.sha;
            const currentWorkflow = 'automerge';

            let tries = 0, maxTries = 40;
            while (tries < maxTries) {
              const checks = await github.rest.checks.listForRef({ owner, repo, ref });
              const pendingChecksOnly = checks.data.check_runs.filter(
                c => !c.name.endsWith('automerge') && c.status !== 'completed'
              );
              const statuses = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref });
              const pendingStatuses = statuses.data.statuses.filter(s => s.state === 'pending');
              pendingChecks = [...pendingChecksOnly,
                ...pendingStatuses.map(s => ({ name: s.context, conclusion: s.state }))];

              const failedChecksOnly = checks.data.check_runs.filter(
                c => c.status === 'completed' && c.conclusion !== 'success' &&
                     c.conclusion !== 'neutral' && c.conclusion !== 'skipped'
              );
              const failedStatuses = statuses.data.statuses.filter(s => s.state === 'failure' || s.state === 'error');
              const failedChecks = [...failedChecksOnly,
                ...failedStatuses.map(s => ({ name: s.context, conclusion: s.state }))];
              if (failedChecks.length > 0) {
                core.notice(
                  'Some checks are failing: ' +
                  failedChecks.map(c => `${c.name} (${c.conclusion})`).join(', ')
                );
                return;
              }
              if (pendingChecks.length === 0) break;
              core.info(`Waiting for checks: ${pendingChecks.map(c => c.name).join(', ')}`);
              await new Promise(r => setTimeout(r, 15000));
              tries++;
            }
            if (tries === maxTries) {
              core.setFailed('Timeout waiting for running checks');
            } else {
              core.info('All checks are done, merging');
              if (pr.user.login.startsWith('dependabot')) {
                await github.rest.pulls.merge({
                  owner, repo, pull_number: pr.number, merge_method: 'squash',
                });
              }
            }
